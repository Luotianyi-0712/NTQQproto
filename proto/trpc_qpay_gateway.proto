syntax = "proto2";
//package code generated by Rick  DO NOT EDIT.
package   trpc.qpay.gateway;

option optimize_for = LITE_RUNTIME;
option java_package = "com.tencent.mobileqq.pb.qwallet";
option java_outer_classname = "PayGatewayProto";

// 编译方式：
// QQLite/pbfile/protoc_mqq --javamqq_out=Business/qqpay-api/src/main/java  QQLite/pbfile/qwallet/trpc_qpay_gateway.proto


/*
参数说明：
  sso gateway && trpc新接口 && 开启加密：
    - 传入Trans：
      cipher -- 加密方式。若后端接口开启加密，当前该字段固定填充为 ecdh，表示使用 ecdh协商+aes gcm。接口一旦开启加密，不支持回退
      tag - base64编码，消息完整性校验
      msgno - 前16位即为向量iv

    - 传出Trans：
      tls_code -- 控制位
      iv -- 偏移向量
      tag -- 消息完整性校验
      cache_seconds -- 共享秘钥过期秒数，对应原有 tls_code = 0x01 时的 arg_data 字段

    - payload(字段为 bytes，因此无需base64)：
      pb序列化 -> aes加密

    - err(字段为 bytes，因此无需base64)：
      ErrDetail序列化 -> aes加密

  sso gateway && 老cgi:
    - payload:
      两级结构，形如 random=1234&req_text=xxx
      其中 req_text 为必填项，携带的是具体业务参数，由业务协商是否加密
      加密时，req_text=base64_encode(业务参数 k1=v1&k2=v2)
*/
// 平台类型，参考微信定义，准备取代 h_model
message TransInfo {
    required string key = 1; // 业务透传key
    required bytes value = 2; // 业务透传value，最大长度2K；模拟metadata，value为bytes
}

// 原有的公共请求部分，比如 h_model 等，是不是放在 context 比较好
// SSO链路，QQ版本号及平台信息通过 sso head 获取；http链路，从cookie中获取
message ProxyReq {
    required string service = 1; // 必填
    required string method = 2; // 必填
    optional bytes payload = 3; // 原有http body透传，加密后的数据
    repeated TransInfo trans = 4; // 业务透传信息，如 Cookie
}

message ProxyRsp {
    optional int32 retcode = 1; // 替换retmsg，只做错误判定，正常时会自动填充 retcode=0
    optional string retmsg = 2; // 替换res_info，制作错误码提示。正常时会自动填充 res_info=success
    optional bytes payload = 3; // 业务回包（密文）
    optional int64 ts      = 4; // 服务器Unix时间戳，单位秒。用于修正终端时间
    repeated TransInfo trans = 5; // 业务透传信息, 如 Set-Cookie
    optional bytes err = 6; // 错误详情 ErrDetail序列化 + [加密，与payload加密时机相同]
}

// ButtonInfo 按钮信息
message ButtonInfo {
    optional string text = 1; // 按钮文案
    optional string url = 2; // 跳转链接
}

// ErrStyle 错误样式 对应cgi ExceptShowFlag
enum ErrStyle {
    ERR_STYLE_DEFAULT = 0; // 默认样式: alert弹框
    ERR_STYLE_TOAST = 1; // 底部toast
    ERR_STYLE_ALERT = 2; // alert弹窗
    ERR_STYLE_HALF = 3; // 半屏
    ERR_STYLE_DIRECT = 4; // 直跳页面: H5或小程序
}

// ButtonStyle 按钮风格
enum ButtonStyle {
    BUTTON_STYLE_NONE = 0; // 无按钮
    BUTTON_STYLE_SINGLE = 1; // 单按钮
    BUTTON_STYLE_DOUBLE_LEFT_JUMP = 2; // 双按钮弹窗，左侧可跳转
    BUTTON_STYLE_DOUBLE_RIGHT_JUMP = 3; // 双按钮弹窗，右侧可跳转
    BUTTON_STYLE_DOUBLE_BOTH_JUMP = 4; // 双按钮弹窗，左/右均可跳转
}
// 控制符
enum TLSCode {
    TLS_CODE_DEFAULT = 0; // 默认
    TLS_CODE_RENEGOTIATE = 2; // 重新协商，复用原有标志位
}

// 错误详情，对应原有cgi伪协议
message ErrDetail {
    optional string retmsg = 1; // 与 ProxyRsp.retmsg 保持一致，ErrDetail 解析失败时，可取外层兜底
    optional ErrStyle err_style = 2; // 错误样式
    optional ButtonStyle button_style = 3; // 错误样式
    repeated ButtonInfo buttons = 4; // 按钮列表。无按钮时无需读取；单按钮时，固定取0号元素；双按钮时，0 - 左按钮 1 - 右按钮
    optional string title = 5; // 弹窗标题
}

message OriginCgiReq{
    optional bytes data = 1;
}

message OriginCgiRsp{
    optional bytes data = 1;
}
